import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Queue;
import java.util.StringTokenizer;

public class SWEA5656 {
	static class Point{
		int r,c,cnt;//벽돌의 위치, 크기

		public Point(int r, int c, int cnt) {
			super();
			this.r = r;
			this.c = c;
			this.cnt = cnt;
		}
		
	}
	static int N,W,H;
	static int dx[] = {0,0,-1,1};
	static int dy[] = {-1,1,0,0};
	public static void main(String[] args) {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in))
		int TC = Integer.parseInt(in.readLine());
		for(int tc = 1; tc <= TC;tc++) {
			N = Integer.parseInt(in.readLine());
			W = Integer.parseInt(in.readLine());
			H = Integer.parseInt(in.readLine());
			int [][] map = new int[H][W];
			for(int i=0; i < H;i++) {
				StringTokenizer st = new StringTokenizer(in.readLine());
				for(int j = 0; j < W; j++) {
					map[i][j] = Integer.parseInt(in.readLine());
				}
			}	
		}
	}
	
	

	//구슬 던지기: 중복 순열
	/**
	 * 
	 * 
	 * @param cnt 직전까지 떨어트린 구슬 수
	 * @param map 직전 상태까지의 map
	 * @return 모든 벽돌이 제거되었는지 여부
	 */
	private static boolean drop(int cnt, int [][] map) {
		
		//구슬을 던지기 전에 현 상태로 남은 벽돌수 체크
		// 남은 벽돌 수가 0 이면 모든 벽돌이 제거된 가장 최적의 상태이므로 최소값 0으로 갱신 후 return true
		
		// 모든 구슬을 다 던졌다면 남은 벽돌 수로 최소값 갱신 후 return false
		
		int newMap[][] = new int[H][W];
		for(int c = 0;c < W ; c++) {// 모든 열에 대해 시도
			//해당 열에 떨어뜨릴 경우 제거되게 되는 맨 윗 벽돌 찾기
			int r = 0;
			while(r < H && map[r][c]== 0) ++r;
			//벽돌이 존재하지 않는다면
			if (r == H) 
				continue;
			//벽돌이 존재한다면 기존 상태에서 복사
			copy(map,newMap);
				//함께 제거될 인접벽돌 연쇄처리
				boom(newMap,r,c);
			
				//제거처리(벽돌 내리기)
				down(newMap);
			
				//다음구슬 던지러 가기 재귀 호출 -> 재귀 호출의 결과가 true이면 가장 최적해의 상황이므로 return true
			if (drop(cnt+1,)) return true;
		}
	
	}
	
	private static void down(int[][] map,int r, int c) {
		Queue<Point> queue = new ArrayDeque<>();
		queue.offer(new Point(r,c,map[r][c]));
		
		if (map[r][c] > 1) queue.offer(new Point(r,c,map[r][c]));
		map[r][c] = 0; // 방문처리
		while(!queue.isEmpty()) {
			Point curr = queue.poll();
			for(int d= 0; d< 4; d++) {
				int nr = curr.r + dx[d];
				int nc = curr.c + dy[d];
			}
		}
		
	}



	private static void boom(int[][] newMap, int r, int c) {
		
	}



	//인접한 제거 벽돌 찾기 : Flood Fill(4방 BFS)
	
	
	//벽돌 내리기 1: 빈자리 위쪽 벽돌 찾아 내리기
	
	
	//배열 복사하기
	private static void copy(int[][] map, int [][] newMap) {
		for(int r = 0; r< H; r++) {
			for(int c = 0;c < W ; c++) {
				newMap[r][c] = map[r][c];
			}
		}
	}
	
	//남은 벽돌 개수 구하기
	private static int getRemain(int [][] map) {
		int cnt = 0;
		for(int r = 0; r< H; r++) {
			for(int c = 0;c < W ; c++) {
				if (map[r][c] != 0)
					cnt++;
			}
		}
		return cnt;
	}
	//디버깅용 : 상태 출력
	
}
